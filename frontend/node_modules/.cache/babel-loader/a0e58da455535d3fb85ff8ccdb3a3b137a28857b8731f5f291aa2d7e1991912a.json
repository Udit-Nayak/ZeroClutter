{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\DUPLICATRO\\\\frontend\\\\src\\\\DriveDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport FileTree from \"./components/FileTree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DriveDashboard() {\n  _s();\n  const [token, setToken] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [loaded, setLoaded] = useState(false);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const t = params.get(\"token\");\n    if (t) {\n      setToken(t);\n    } else {\n      setError(\"No token found in URL.\");\n    }\n  }, []);\n  const fetchDriveFiles = async () => {\n    try {\n      setLoading(true);\n      setError(\"\");\n      await axios.post(\"http://localhost:5000/api/driveFiles/scan\", {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        } // âœ… fixed here\n      });\n      const res = await axios.get(\"http://localhost:5000/api/driveFiles/list\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const flatFiles = res.data;\n      const fileTree = buildTree(flatFiles);\n      setFiles(fileTree);\n      setLoaded(true);\n    } catch (err) {\n      console.error(\"Failed to fetch files:\", err);\n      setError(\"Failed to fetch files. Make sure you're logged in and Drive is connected.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  const buildTree = items => {\n    const map = {};\n    const roots = [];\n    items.forEach(item => {\n      map[item.file_id] = {\n        ...item,\n        children: []\n      };\n    });\n    items.forEach(item => {\n      const parentId = item.parent_id;\n      if (parentId && map[parentId] && parentId !== item.file_id) {\n        map[parentId].children.push(map[item.file_id]);\n      } else {\n        roots.push(map[item.file_id]);\n      }\n    });\n    return roots;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Drive Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this), !loaded && !loading && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchDriveFiles,\n      children: \"\\uD83D\\uDCC2 List My Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 19\n    }, this), !loading && files.length > 0 && /*#__PURE__*/_jsxDEV(FileTree, {\n      nodes: files\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 40\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(DriveDashboard, \"EAgkdbYi9bxOUTFGvBJfLY+LHlk=\");\n_c = DriveDashboard;\nexport default DriveDashboard;\nvar _c;\n$RefreshReg$(_c, \"DriveDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","FileTree","jsxDEV","_jsxDEV","DriveDashboard","_s","token","setToken","files","setFiles","loading","setLoading","error","setError","loaded","setLoaded","params","URLSearchParams","window","location","search","t","get","fetchDriveFiles","post","headers","Authorization","res","flatFiles","data","fileTree","buildTree","err","console","items","map","roots","forEach","item","file_id","children","parentId","parent_id","push","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","color","onClick","length","nodes","_c","$RefreshReg$"],"sources":["D:/web/DUPLICATRO/frontend/src/DriveDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport FileTree from \"./components/FileTree\";\r\n\r\nfunction DriveDashboard() {\r\n  const [token, setToken] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [loaded, setLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const t = params.get(\"token\");\r\n    if (t) {\r\n      setToken(t);\r\n    } else {\r\n      setError(\"No token found in URL.\");\r\n    }\r\n  }, []);\r\n\r\n  const fetchDriveFiles = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(\"\");\r\n      await axios.post(\r\n        \"http://localhost:5000/api/driveFiles/scan\",\r\n        {},\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` }, // âœ… fixed here\r\n        }\r\n      );\r\n      const res = await axios.get(\"http://localhost:5000/api/driveFiles/list\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const flatFiles = res.data;\r\n      const fileTree = buildTree(flatFiles);\r\n      setFiles(fileTree);\r\n      setLoaded(true);\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch files:\", err);\r\n      setError(\r\n        \"Failed to fetch files. Make sure you're logged in and Drive is connected.\"\r\n      );\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const buildTree = (items) => {\r\n    const map = {};\r\n    const roots = [];\r\n    items.forEach((item) => {\r\n      map[item.file_id] = { ...item, children: [] };\r\n    });\r\n\r\n    items.forEach((item) => {\r\n      const parentId = item.parent_id;\r\n      if (parentId && map[parentId] && parentId !== item.file_id) {\r\n        map[parentId].children.push(map[item.file_id]);\r\n      } else {\r\n        roots.push(map[item.file_id]);\r\n      }\r\n    });\r\n\r\n    return roots;\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"2rem\" }}>\r\n      <h2>Your Drive Files</h2>\r\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\r\n      {!loaded && !loading && (\r\n        <button onClick={fetchDriveFiles}>ðŸ“‚ List My Files</button>\r\n      )}\r\n      {loading && <p>Loading...</p>}\r\n      {!loading && files.length > 0 && <FileTree nodes={files} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriveDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}