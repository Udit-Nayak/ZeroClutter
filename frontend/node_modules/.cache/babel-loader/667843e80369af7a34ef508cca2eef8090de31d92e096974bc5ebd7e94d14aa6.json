{"ast":null,"code":"var _jsxFileName = \"D:\\\\web\\\\DUPLICATRO\\\\frontend\\\\src\\\\DriveDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport FileTree from \"./components/FileTree\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DriveDashboard() {\n  _s();\n  const [token, setToken] = useState(\"\");\n  const [files, setFiles] = useState([]);\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const t = params.get(\"token\");\n    if (t) {\n      setToken(t);\n      fetchDriveFiles(t);\n    }\n  }, []);\n  const fetchDriveFiles = async token => {\n    try {\n      await axios.post(\"http://localhost:5000/api/driveFiles/scan\", {}, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const res = await axios.get(\"http://localhost:5000/api/driveFiles/list\", {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      const flatFiles = res.data;\n      const fileTree = buildTree(flatFiles);\n      setFiles(fileTree);\n    } catch (err) {\n      console.error(\"Failed to fetch files\", err);\n    }\n  };\n  const buildTree = items => {\n    const map = {};\n    const roots = [];\n    items.forEach(item => {\n      map[item.file_id] = {\n        ...item,\n        children: []\n      };\n    });\n    items.forEach(item => {\n      const parentId = item.parent_id;\n      if (parentId && map[parentId]) {\n        map[parentId].children.push(map[item.file_id]);\n      } else {\n        roots.push(map[item.file_id]);\n      }\n    });\n    return roots;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"2rem\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Drive Files\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), files.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No files found.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: files.map(f => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [f.name, \" (\", f.mime_type, \") \\u2014 \", Math.round((f.size || 0) / 1024), \" KB\"]\n      }, f.file_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(DriveDashboard, \"hLN9+2FT/BZSmE8yVgbcYA+6EC0=\");\n_c = DriveDashboard;\nexport default DriveDashboard;\nvar _c;\n$RefreshReg$(_c, \"DriveDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","FileTree","jsxDEV","_jsxDEV","DriveDashboard","_s","token","setToken","files","setFiles","params","URLSearchParams","window","location","search","t","get","fetchDriveFiles","post","headers","Authorization","res","flatFiles","data","fileTree","buildTree","err","console","error","items","map","roots","forEach","item","file_id","children","parentId","parent_id","push","style","padding","fileName","_jsxFileName","lineNumber","columnNumber","length","f","name","mime_type","Math","round","size","_c","$RefreshReg$"],"sources":["D:/web/DUPLICATRO/frontend/src/DriveDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport FileTree from \"./components/FileTree\";\r\n\r\n\r\nfunction DriveDashboard() {\r\n  const [token, setToken] = useState(\"\");\r\n  const [files, setFiles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const t = params.get(\"token\");\r\n    if (t) {\r\n      setToken(t);\r\n      fetchDriveFiles(t);\r\n    }\r\n  }, []);\r\n\r\n  const fetchDriveFiles = async (token) => {\r\n    try {\r\n      await axios.post(\r\n        \"http://localhost:5000/api/driveFiles/scan\",\r\n        {},\r\n        {\r\n          headers: { Authorization: `Bearer ${token}` },\r\n        }\r\n      );\r\n\r\n      const res = await axios.get(\"http://localhost:5000/api/driveFiles/list\", {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n\r\n      const flatFiles = res.data;\r\n  const fileTree = buildTree(flatFiles);\r\n  setFiles(fileTree);\r\n\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch files\", err);\r\n    }\r\n  };\r\n\r\n  const buildTree = (items) => {\r\nconst map = {};\r\nconst roots = [];\r\nitems.forEach((item) => {\r\n  map[item.file_id] = { ...item, children: [] };\r\n});\r\n\r\nitems.forEach((item) => {\r\n  const parentId = item.parent_id;\r\n  if (parentId && map[parentId]) {\r\n    map[parentId].children.push(map[item.file_id]);\r\n  } else {\r\n    roots.push(map[item.file_id]);\r\n  }\r\n});\r\n\r\nreturn roots;\r\n  };\r\n\r\n\r\n  return (\r\n    <div style={{ padding: \"2rem\" }}>\r\n      <h2>Your Drive Files</h2>\r\n      {files.length === 0 ? (\r\n        <p>No files found.</p>\r\n      ) : (\r\n        <ul>\r\n          {files.map((f) => (\r\n            <li key={f.file_id}>\r\n              {f.name} ({f.mime_type}) â€” {Math.round((f.size || 0) / 1024)} KB\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DriveDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}